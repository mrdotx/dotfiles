# path:   /home/klassiker/.local/share/repos/dotfiles/.config/ranger/rifle.conf
# author: klassiker [mrdotx]
# github: https://github.com/mrdotx/dotfiles
# date:   2024-09-01T06:40:01+0200

# Syntax:
#   <condition1>, <condition2>, ... = command

# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files

# If you use the special command "ask", rifle will ask you what program to run.

# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | A graphical environment is available (darwin, Xorg, or Wayland)

# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.

# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal. If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
#   c | Only running the current file even if you have marked multiple files.
#     |   New command = $command $1

#------------------------------------------------------------------------------
# open
#------------------------------------------------------------------------------
# archives - requires compressor.sh (https://github.com/mrdotx/shell)
ext 7z|a|alz|apk|arj|bz|bz2|bzip2|cab|cb7, has compressor.sh = compressor.sh "$@"
ext cbt|chm|chw|cpio|deb|dmg|exe|gz|gzip,  has compressor.sh = compressor.sh "$@"
ext hxs|iso|jar|lha|lz|lzh|lzma|lzo|msi,   has compressor.sh = compressor.sh "$@"
ext pkg|rar|rpm|swm|tar|taz|tbz|tbz2|tgz,  has compressor.sh = compressor.sh "$@"
ext tlz|txz|tz2|tzo|tzst|udf|war|wim|xar,  has compressor.sh = compressor.sh "$@"
ext xpi|xz|z|zip|zst,                      has compressor.sh = compressor.sh "$@"

# documents
ext 1,                               has man                    = man "$@"
ext pdf|djvu|epub|cb[rz],            has zathura,     X, flag f = zathura "$@"
ext sla,                             has scribus,     X, flag f = scribus "$@"
ext od[dfgpst]|sxc|csv|gnm|gnumeric, has libreoffice, X, flag f = libreoffice "$@"
ext pptx?|docx?|xlsx?|xlt|xlw|rtf,   has libreoffice, X, flag f = libreoffice "$@"

# downloads - requires aria2c.sh (https://github.com/mrdotx/shell)
mime ^application/x-bittorrent, has aria2c = aria2c.sh "$@"

# images
mime ^image/svg, has inkscape, X, flag f = inkscape "$@"
mime ^image,     has nsxiv,    X, flag f = nsxiv --quiet --animate --scale-mode w "$@"
mime ^image,     has gimp,     X, flag f = gimp "$@"

# audio - requires menu_playlist.lua (https://github.com/mrdotx/dotfiles)
ext m3u8?,   has mpv, X, flag f = mpv --terminal=no --script-opts=menu_playlist=1 "$@"
mime ^audio, has mpv            = mpv --vid=no "$@"

# video
mime ^video, has mpv,         X, flag f = mpv "$@"
mime ^video, has mpv,        !X,        = mpv --vid=no "$@"
mime ^video, has losslesscut, X, flag f = losslesscut "$@"

#------------------------------------------------------------------------------
# fallback
#------------------------------------------------------------------------------
# terminals (flag t)
mime ^ranger/x-terminal-emulator, has urxvt, label urxvt = urxvtc.sh -e "$@"
mime ^ranger/x-terminal-emulator, has st,    label st    = st -e "$@"

# general last actions
!directory, env EDITOR,              label editor    = "$EDITOR" "$@"
!directory, env PAGER,               label pager     = "$PAGER" "$@"
!directory, has exiftool, env PAGER, label exif      = exiftool "$@" | "$PAGER"
!directory, has nvim,                label difftool  = nvim -d "$@"
mime ^text, has sent, X, flag f,     label presenter = sent "$1"

#------------------------------------------------------------------------------
# open with
#------------------------------------------------------------------------------
# playlists, requires m3u_converter.sh (https://github.com/mrdotx/epg)
ext csv|m3u8?, has m3u_converter.sh = m3u_converter.sh "$1"

# wallpaper, requires wallpaper.sh (https://github.com/mrdotx/shell)
ext jpe?g|png, has wallpaper.sh = wallpaper.sh "$1"

# pdf, requires pdf.sh (https://github.com/mrdotx/shell)
mime ^image, has pdf.sh = pdf.sh --convert text "$@"
mime ^image, has pdf.sh = pdf.sh --convert screen "$@"
mime ^image, has pdf.sh = pdf.sh --convert ebook "$@"
mime ^image, has pdf.sh = pdf.sh --convert print "$@"
mime ^image, has pdf.sh = pdf.sh --convert all "$@"
ext pdf,     has pdf.sh = pdf.sh --compress screen "$@"
ext pdf,     has pdf.sh = pdf.sh --compress ebook "$@"
ext pdf,     has pdf.sh = pdf.sh --compress printer "$@"
ext pdf,     has pdf.sh = pdf.sh --compress prepress "$@"
ext pdf,     has pdf.sh = pdf.sh --compress default "$@"
ext pdf,     has pdf.sh = pdf.sh --compress all "$@"
ext pdf,     has pdf.sh = pdf.sh --chain "$@"
ext pdf,     has pdf.sh = pdf.sh --unchain "$@"

# websites
ext x?html?, has w3m                    = w3m.sh "$@"
ext x?html?, has surf,        X, flag f = surf.sh "$@"
ext x?html?, has qutebrowser, X, flag f = qutebrowser "$@"
ext x?html?, has firefox,     X, flag f = firefox "$@"

# decrypt
ext gpg|asc, has gpg = gpg "$1"

# scripts
ext sh,  has sh     = sh "$1"
ext pl,  has perl   = perl "$1"
ext js,  has node   = node "$1"
ext py,  has python = python "$1"
ext php, has php    = php "$1"

# flash, requires ironos_flasher.sh (https://github.com/mrdotx/ironos-flasher)
ext hex, has ironos_flasher.sh = ironos_flasher.sh "$1"
ext hex, has avrdude           = sleep 3 && ${EXEC_AS_USER:-sudo} avrdude -p atmega32u4 -P /dev/ttyACM0 -c avr109 -U flash:w:"$1"

# make
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make install
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make clean install
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make clean man install
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make dist
name ^[mM]akefile$, has make = ${EXEC_AS_USER:-sudo} make uninstall
name ^[mM]akefile$, has make = make
name ^[mM]akefile$, has make = make clean

# build
name ^configure$,      env PAGER      = "$1" --help | "$PAGER"
name ^PKGBUILD$,       has updpkgsums = updpkgsums
name ^PKGBUILD$,       has makepkg    = makepkg --printsrcinfo > .SRCINFO
name ^PKGBUILD$,       has makepkg    = makepkg --syncdeps --install
name \.pkg\.tar\.zst$, has pacman     = ${EXEC_AS_USER:-sudo} pacman --upgrade "$1"

# execute
mime application/.*executable = "$1"

#------------------------------------------------------------------------------
# directory open with
#------------------------------------------------------------------------------
# if a directory and a file are marked for execution
directory = ask

# webserver/filesharing
directory, has python, flag t = python -m http.server 8080 -d "$1"

# stats, requires pkgstats.sh (https://github.com/mrdotx/shell)
directory, has pkgstats.sh = pkgstats.sh "$@"

# vim: ft=cfg
